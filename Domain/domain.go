package domain

// imports
import (
	"errors";
	"time";
	"github.com/dgrijalva/jwt-go";
	"go.mongodb.org/mongo-driver/bson/primitive";
)

// task item
type Task struct {
	ID            primitive.ObjectID    `bson:"_id,omitempty" json:"id"`                                     // unique identifier of task generated by mongodb
	Title         string                `bson:"title" json:"title"`                  		           // title of task
	Description   string                `bson:"description" json:"description"`    				     // description of task
	DueDate       time.Time             `bson:"due_date" json:"due_date"`  		                                // due date of task (ISO 8601 format)
	Status        string      			`bson:"status" json:"status" binding:"oneof=pending in_progress completed"`       // status of task
}

// user item
type User struct {
	ID           primitive.ObjectID     `bson:"_id,omitempty" json:"id"`         // mongodb's unique identifier for users 
	Username     string                 `bson:"username" json:"username"`        // username 
	Password     string      	    `bson:"password" json:"password"`        // password (hashed before storage)
	Role         string      	    `bson:"role" json:"role"`                // user role (role/user)
}

// credential item
type Credentials struct {
	Username 	 string          `json:"username" binding:"required"`       // login username (required field)
        Password 	 string 	 `json:"password" binding:"required"`       // login password (required field)
}

// task repository interface 
type TaskRepository interface {
	CreateTask(task *Task) (*Task, error)                     // create new task with validation
	DeleteTask(taskID string) error                           // delete existing task or return error if not found
	GetAllTasks() ([]Task, error)         			  // get all tasks in the system
	GetTaskByID(taskID string) (*Task, error) 		  // get specific task by id or return error if not found
	UpdateTask(taskID string, task *Task) (*Task, error)      // update existing task or return error if not found
}

// user repository interface
type UserRepository interface {    
	CreateUser(user *User) error                              // create new user with validation
	GetByUsername(username string) (*User, error)             // get specific user by username or return error if not found
	GetUserById(id primitive.ObjectID) (*User, error)         // get specific user by id or return error if not found
	GetUserCount() (int64, error)                             // get total user count or return error 
	UpdateRole(id primitive.ObjectID, role string) error      // update user's role to admin or return error if not found                            
}

// jwt service interface
type JWTService interface {
	GenerateToken(userID, username, role string) (string, error)       // generate token or return error
	ValidateToken(tokenStr string) (*jwt.Token, error)                 // validate token or return error
}

// password service interface
type PasswordService interface {
	HashPassword(password string) (string, error)       // hash password or return error
	CheckPassword(hashed, plain string) bool            // check password and return bool (true/false)
}

// custom errors
var (
	ErrTaskNotFound      = errors.New("task not found")              // custom task not found error
	ErrInvalidTaskID     = errors.New("invalid task ID")             // custom invalid task id error
	ErrUserExists        = errors.New("user already exists")         // custom user exists error
	ErrUserNotFound      = errors.New("user not found")              // custom user not found error
	ErrInvalidUserID     = errors.New("invalid user ID")             // custom invalid user id error
	ErrInvalidCredentials = errors.New("invalid credentials")        // custom invalid credentials error
	ErrUnauthorized      = errors.New("unauthorized access")         // custom unauthorized access error
)
